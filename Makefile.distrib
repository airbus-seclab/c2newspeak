VERSION=1.2

CP=cp
RM=rm -rf
OCAMLLEX=ocamllex
OCAMLYACC=ocamlyacc
OCAMLC=ocamlc -w Ael -warn-error Ael
OCAMLOPT=ocamlopt -w Ael -warn-error Ael -inline 100 -noassert -unsafe
OCAMLDEP=ocamldep
OCAMLDOC=ocamldoc

CILDIR=cil/obj
CIL=$(CILDIR)/cil.cmxa

INCLUDE=-I $(CILDIR) -I src/ -I src/newspeak/ -I src/npksimplify -I src/npkstats
LIB=nums.cma
LIBX=unix.cmxa str.cmxa nums.cmxa $(CIL)

C2NFILES:=config cilutils params newspeak npkcontext \
         pp_syntax pp_lexer pp_parser \
         csyntax cir synthack lexer parser \
         spec_lexer spec_parser \
         npkil npkutils cilenv \
         cilfirstpass cilcompiler \
         firstpass compiler \
         link c2newspeak
C2NFILES:=version $(addprefix newspeak/, $(C2NFILES))
C2NFILES:=$(addprefix src/, $(C2NFILES))
C2NCMX=$(addsuffix .cmx, $(C2NFILES))

NSFILES:=normalize store copy_propagation inline var_hoist npksimplify
NSFILES:=$(addprefix npksimplify/,$(NSFILES))
NSFILES:=$(addprefix src/,$(NSFILES))
NSCMX=src/version.cmx src/newspeak/newspeak.cmx $(addsuffix .cmx, $(NSFILES))

STATFILES=src/npkstats/stackcount src/npkstats/npkstats

MLI=$(addsuffix .mli, $(C2NFILES))
ML=$(addsuffix .ml, $(C2NFILES) $(NSFILES) $(STATFILES)) $(addsuffix .ml, )

NPKFILES=src/newspeak/newspeak.cmi newspeak.cma newspeak.cmxa newspeak.a \
         lib/*

CLEANFILES=*~ .depend \
           *.a *.cma *.cmxa \
           bin/* \
           src/newspeak/*.a src/newspeak/*.cma src/newspeak/*.cmxa \
           src/newspeak/*.cmo \
           src/*~ \
           src/npkstrip/*.cmi src/npkstrip/*.cmx src/npkstrip/*.o \
           src/npkstrip/*~ \
           src/npk2bytesz/*~ \
	   src/npkcheck/*~ src/npkcheck/*.cmi src/npkcheck/*.cmx \
           src/npkcheck/*.o \
           src/npkstrip/npkstrip src/npkstrip/npkstrip.exe \
           src/newspeak/*.o src/newspeak/*.cmi src/newspeak/*.cmx \
           src/newspeak/*~ \
           src/newspeak/parser.ml src/newspeak/parser.mli \
           src/newspeak/parser.output src/newspeak/lexer.ml \
           src/newspeak/pp_parser.ml src/newspeak/pp_parser.mli \
           src/newspeak/pp_parser.output src/newspeak/pp_lexer.ml \
           src/newspeak/spec_parser.ml src/newspeak/spec_parser.mli \
           src/newspeak/spec_parser.output src/newspeak/spec_lexer.ml \
           src/newspeak/c2newspeak.exe \
           src/newspeak/.depend src/npkstrip/.depend \
           src/version.o src/version.cmi src/version.cmo src/version.cmx \
           doc/*.html doc/*~ \
           tests/newspeak/000 tests/newspeak/001 tests/newspeak/002 \
           tests/newspeak/003 tests/newspeak/*_check tests/newspeak/003.npk \
           tests/npk2bytesz/*.bak \
	   lib/*~ lib/sys/*~ \
           src/npkstats/*.o src/npkstats/*.cmi src/npkstats/*.cmx \
           src/npkstats/*~ \
           src/npksimplify/*.o src/npksimplify/*.cmi src/npksimplify/*.cmx \
           src/npksimplify/*~ \
           src/npk2bytesz/*.o src/npk2bytesz/*.cmi src/npk2bytesz/*.cmx \
           tests/*.bak tests/result \
           tests/mem_opt/*~


.PHONY: all clean install doc

#TODO: remove this recursive call
install: $(CIL) c2newspeak doc npkstrip npkstats npksimplify npk2bytesz \
         npkcheck newspeak

$(CIL):
	cd cil; tar xzf cil-1.3.5.tar.gz
	cd cil/cil; ./configure
	$(CP) cil/machdep.ml cil/cil/obj/x86_WIN32/
	$(CP) cil/machdep.ml cil/cil/obj/x86_LINUX/
	cd cil/cil; make
	-$(CP) cil/cil/obj/x86_WIN32/* $(CILDIR)
	-$(CP) cil/cil/obj/x86_LINUX/* $(CILDIR)

newspeak: $(NPKFILES)
	$(CP) -r $(NPKFILES) bin

c2newspeak: $(C2NCMX)
	$(OCAMLOPT) $(INCLUDE) $(LIBX) $(C2NCMX) -o bin/c2newspeak

#TODO: clean up this
npkstrip: src/version.cmx src/newspeak/newspeak.cmx src/npkstrip/npkstrip.cmx
	$(OCAMLOPT) $(INCLUDE) $(LIBX) src/version.cmx src/newspeak/newspeak.cmx src/npkstrip/npkstrip.cmx -o bin/npkstrip

#TODO: clean this up
npkstats: src/version.cmx src/newspeak/newspeak.cmx src/npkstats/stackcount.cmx src/npkstats/npkstats.cmx
	$(OCAMLOPT) $(INCLUDE) $(LIBX) src/version.cmx src/newspeak/newspeak.cmx src/npkstats/stackcount.cmx src/npkstats/npkstats.cmx -o bin/npkstats

#TODO: clean this up
npksimplify: $(NSCMX)
	$(OCAMLOPT) $(INCLUDE) $(LIBX) $(NSCMX) -o bin/npksimplify

#TODO: clean this up
npk2bytesz: src/version.cmx src/newspeak/newspeak.cmx \
            src/npk2bytesz/npk2bytesz.cmx
	$(OCAMLOPT) $(INCLUDE) $(LIBX) src/version.cmx src/newspeak/newspeak.cmx src/npk2bytesz/npk2bytesz.cmx -o bin/npk2bytesz

npkcheck: src/version.cmx src/newspeak/newspeak.cmx \
          src/npkcheck/npkcheck.cmx
	$(OCAMLOPT) $(INCLUDE) $(LIBX) src/version.cmx src/newspeak/newspeak.cmx src/npkcheck/npkcheck.cmx -o bin/npkcheck

#TODO: clean up this
newspeak.cma: src/version.cmi src/version.cmx src/newspeak/newspeak.ml
	$(OCAMLC) $(INCLUDE) $(LIB) -a src/version.ml src/newspeak/newspeak.ml -o newspeak.cma

#TODO: clean up this
newspeak.a newspeak.cmxa: src/version.cmi src/version.cmx src/newspeak/newspeak.ml
	$(OCAMLOPT) $(INCLUDE) -a src/version.cmx src/newspeak/newspeak.ml -o newspeak.cmxa

#Implicit rules
%.cmi: %.mli
	$(OCAMLC) $(INCLUDE) $(LIB) -c $<

%.cmo: %.ml
	$(OCAMLC) $(INCLUDE) $(LIB) -c $<

%.cmx: %.ml
	$(OCAMLOPT) $(INCLUDE) $(LIBX) -c $<

%.ml: %.mll
	$(OCAMLLEX) $<

%.mli %.ml: %.mly
	$(OCAMLYACC) -v $<

doc: src/version.cmi src/newspeak/newspeak.cmi
	$(OCAMLDOC) -I src -I src/newspeak src/newspeak/newspeak.mli src/newspeak/newspeak.ml -html -d doc -css-style newspeak.css -t "Newspeak - doubleplussimple minilang for static analysis (v. $(VERSION))" -intro doc/npkintro.mldoc -colorize-code

#TODO: do not call clean recursively
clean:
	$(RM) $(CLEANFILES)

clean-all: clean
	$(RM) -r cil/cil $(CILDIR)

.depend: $(ML)
	@mkdir bin 2> /dev/null; true
	@mkdir $(CILDIR) 2> /dev/null; true
	@$(OCAMLDEP) $(INCLUDE) $(MLI) $(ML) > .depend

include .depend

